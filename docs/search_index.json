[["methods.html", "Section 2 Methods", " Section 2 Methods In this project, we extracted R package names from CRAN and got summary daily download logs of R packages through web API maintained by r-hub(R-Hub, n.d.a). And we also collected release dates of R packages through CRAN. In addition, we also tried to scrap the number of commits in Github repository for R packages. Then we constructed eight exploratory data analysis sections: we explored the daily download of all the packages on CRAN and figured out the number of packages occupied by different downloaded groups; we analyzed the daily download trend of R itself and the found out the most popular version of R; we compared the top 15 downloaded packages on CRAN on 1st April. from year 2013 to 2021 to see how the user preference changes; we figured out the relationship between initial release date and the total download count for last half a year; we compared two closely related packages fable and forecast to see the difference between their MA (moving average); we studied how the number of commits of master (main) branch on Github repository influence the total download count for last half a year; we explored the relationship between the number of updates of packages and its download count; we analyzed the name length pattern for both CRAN task view packages and all the packages on CRAN; we explored how the alphabetical order of packages affected the download count and its statistic features (variance, median). References "],["results.html", "Section 3 Results ", " Section 3 Results "],["daily-download-of-r-packages.html", "3.1 Daily download of R-packages", " 3.1 Daily download of R-packages Finding 1: There was unusual download activity in one day of 2014 and 2018. In this first section, we studied the daily downloads of CRAN packages from 2012-10-01 to 2021-06-07. The data was obtained from the cranlogs package(Csárdi 2019), which includes a summary of the download logs from the RStudio CRAN mirror. The daily download data for CRAN packages are available from 1st October 2012. Examination of this data showed two unusual observations in 2014 and 2018 as shown in Figure 3.1. The one happening in 2014 was on 2014-11-17, which was Monday, while the other one happening in 2018 was on 2018-10-21, which was on Sunday. Figure 3.1: Unusual download spikes on 2014 and 2018. Then let’s have a closer look into these two spikes. First, we focused on the spike on 2014-11-17. From Table 3.1, we could see that the downloads between top downloaded packages on this day differs little, so it’s not due to certain package. Table 3.1: The total downloads of each package on 2014-11-17 package n BayHaz 767035 clhs 660298 GPseq 394840 OPI 382518 YaleToolkit 370513 survsim 224994 BAT 40592 Rcpp 3509 ggplot2 3167 plyr 3150 Table 3.2 shows the downloads from different countries. It is obvious that downloads from Indonesia is much more than any others, which indicates the most downloads are from Indonesia. Table 3.2: The countries downloading from CRAN on 2014-11-17 country n ID 2863576 US 96336 CN 32729 DE 14548 FR 11860 GB 10491 IN 8635 HK 8090 BE 7720 KR 6794 Furthermore, we also checked the IP address in Table 3.3, downloads from ip3758 is much higher than others. So, it seems that most of the downloads were owing to one certain IP. Table 3.3: The IP address downloading from CRAN on 2014-11-17 ip_id n 3758 2863432 11536 6244 11725 5992 16385 5991 534 5986 3784 5983 18519 4511 80 2124 27 1892 464 1375 Next, let’s turn to the one in 2018. Table 3.4 shows the downloads from tidyverse is much higher than others with nearly three orders of magnitude. Table 3.4: The total downloads of each package on 2014-11-17 package n tidyverse 11692582 Rcpp 16263 stringi 13981 rlang 13796 ggplot2 13306 dplyr 13081 glue 12593 digest 12302 stringr 11505 fansi 11275 As for the country, from Table 3.5 we could know that US is much higher than any other country. Table 3.5: The countries downloading from CRAN on 2014-11-17 country n US 12140853 NA 179847 GB 76624 IN 51502 CN 46095 TR 36590 AU 35078 DE 32837 CA 31125 KR 30469 Finally, the most interesting finding is in IP address displayed in Table 3.6. Several consecutive IP has highly distinguished downloads. It seems that they are from same person, or it is also probably a test server issue in the same short period of time. Table 3.6: The IP address downloading from CRAN on 2014-11-17 ip_id n 266 3034720 263 2457383 655 2099321 264 1557640 267 1406876 265 1032535 2 179711 268 99932 112 34397 3296 17223 Therefore, to sum up, we found that these two unusual spikes have one thing in common, that is, most of the downloads came from a specific country. The difference is that in 2014, a large number of downloads came from several different packages, while in 2018, they came from one package tidyverse. In addition, in 2014, a large number of downloads came from one IP, while in 2018, they came from several consecutive IPs, At this point, we guess it should come from the same person, and it is likely to be sever issue, for it may be not necessary and reasonable for an individual to generate such a high amount of downloads in one day. Finding 2: There is an increasing number of downloads over time. This likely attests to the growing number of R users. Figure 3.2 shows the download trend of all packages on CRAN over time after fixing the unusual spikes. It shows an upward trend over time, and the variance also increases with the download count, which means the volatility of the data is increasing. Figure 3.2: The download trend of all packages on CRAN over time. Finding 3: Weekends have a lower download than weekdays. To have a closer look at the weekly pattern, figure 3.3 shows the daily downloads of all CRAN packages from the RStudio mirror with the grey areas highlighting the weekend. To be more specific, we could know that except for 2012 and 2013, the patterns of other years are very similar, that is, they all show strong weekly seasonality. To be more detailed, in 2012, the download logs showed an overall upward trend, because more and more users began to download packages from CRAN after its open. In the following years, there is no obvious trend in download volume, but a strong seasonality, which indicates that in a week, the total downloads always increases first then decreases, and reaches the lowest at the weekend. Although the pattern of 2013 is more volatile, it still conforms to that. We think for 2013, that is because CRAN is only open for a short time at this time, and the amount of data downloaded is not adequate to show its download pattern very clearly. Considering this, we could see that after 2016, the pattern of each year is quite consistent, for the total download has been increasing year by year. Back to weekly seasonality, that is because people are more likely to download and use packages in weekdays, and rest on weekends. And that’s why the trough of download curve always occurs on weekends. In addition, we could also notice that the lowest downloads across the year are always at the end of December and the beginning of January, probably due to the Christmas and New Year’s holidays. What’s more, the downloads is on the rise from August to October and from February to April, which covers the start of semester for most universities. Figure 3.3: The figure shows the total downloads of all packages on CRAN would decrease on weekends. As there are many fluctuation in daily download pattern which is due to calendar effect and server issue of CRAN mirror, we then applied a model called STL decomposition explained in “Forecasting: Principles and Practice (3rd Ed)” (n.d.), to smooth the curve for all the packages. Figure 3.4: The figure shows the total downloads of all packages on CRAN after smoothing. And this can be applied to any package to adjust the daily download pattern. In this case, we selected two packages fable and forecast as an example in Figure 3.5. It can be seen that the pattern is smoother after removing the seasonality and ignorance of extremum possibly caused by repeated downloads, updates and test downloads from the server. Figure 3.5: The figure shows the daily downloads of fable and forecast on CRAN after smoothing. Figure ?? shows the distribution and the median of the downloads between weekday and weekends. The distribution of weekdays and weekends are quite different. Weekends are wider and shorter, while weekdays are thinner and higher, because the total download of data on weekends is less than that on weekdays. And in 2012, the median and interquartile range of download logs are not very distinguished between weekdays and weekends, for the data volume was not adequate at this time as mentioned above. But after 2013, the gap between the two becomes more and more obvious, that is, the median downloads of working days is significantly higher than that of weekends, and the overall number of data is also significantly higher than that of weekends as well. But interestingly, the lower adjacent sometimes occurs on weekends, such as in year 2014, 2015, 2018, 2019 and 2021, while sometimes in weekdays, such as in year 2012, 2013, 2016, 2017 and 2020. Finding 4: Top 10% downloaded packages share nearly 90% cumulative download count of the whole. From the previous analysis, we could see that the cumulative download count of R packages shows an increasing trend. It would be perfect equality if every package had the same download count – the last 20% downloaded packages would gain 20% of the total download count or the top 60% downloaded packages would get 60% of the total download count. But we know from experience that this is obviously impossible, so here we introduced Lorenz curve(Pettinger, n.d.) to show the respective number of packages of different download levels (groups defined by quantiles of download count). In this way, we could figure out how many download counts contributed by different downloaded packages. Figure 3.2 shows cumulative download count against each downloaded group. It can be seen that most of the download counts come from the top 10% downloaded packages. At the same time, we could also observe that the Gini value is close to 1, which indicates that the download volume among groups is very unbalanced. In fact, the download volume of the top 10% group is extremely distinguished from that of the following groups. It’s not hard to understand that this group should contain some packages with high popularity and large quantities of users. For example, if we extracted the first 10 packages of this group in Table 3.7, we could find that they are all quite famous and frequently-used ones. Figure 3.6: Percentiles of the download count against cumulative download count of packages at or below that percentile. Table 3.7: First 10 packages of top 10% downloaded group package total rlang 15572507 vctrs 13544857 dplyr 12739206 ggplot2 12670952 jsonlite 12627542 lifecycle 11124212 tibble 10935860 magrittr 10312021 pillar 9566463 glue 9534999 References "],["daily-downloads-of-r.html", "3.2 Daily downloads of R", " 3.2 Daily downloads of R In this section, we studied the daily downloads of R language itself from 2012-10-01 to 2021-06-07. The data was obtained from the cranlogs package (Csárdi 2019) as well. Finding 1: The number of downloads shows an upward trend over time, and the variance also increases with the downloads. Figure 3.7 shows the download trend of R on CRAN over time. It shows an upward trend over time, and the variance also increases with the download count, which indicates the volatility of the data is increasing as well. And that is resulted from the pump of R users. As for the significant spikes, it is probably quite similar to the situation of R packages, which is due to repeated downloads, weekly calendar effect and server test. Figure 3.7: The download trend of R on CRAN over time. Finding 2: The most used operation system for R users is Windows OS. Figure 3.8 shows the comparison of operation system for R users. The number of Windows users ranks first, followed by MacOS and SRC. For Microsoft has traditionally dominated the desktop and laptop market. And Microsoft officially claims there are 400 million active users of Windows 10 itself, while Apple revealed that there are now nearly 100 million active Mac users.(Warren 2017) Figure 3.8: The download trend of R on CRAN over time. Finding 3: The most popular version of R is 3.2.1 And Table 3.8 shows the number of downloads of different versions of R. The most downloaded one is 3.2.1 with 4526 times, followed by 3.3.3 with 4305 times and 3.1.2 with 3958 times. So, most users tend to install the latest version of R to get the newest update information. Table 3.8: The number of downloads of different versions of R R_version count 3.2.1 4526 3.3.3 4305 3.1.2 3958 3.2.2 3781 3.4.0 3585 3.1.1 3458 3.5.1 3450 3.4.3 3409 3.4.1 3398 3.3.0 3362 3.4.4 3349 3.2.3 3308 3.0.3 3294 3.1.3 3274 3.3.2 3235 3.1.0 3216 3.5.0 3136 3.3.1 3107 2.15.3 2895 3.2.0 2873 3.4.2 2743 3.6.1 2636 3.0.1 2543 3.0.0 2537 3.0.2 2517 3.5.2 2514 3.5.3 2496 3.6.0 2374 2.15.0 2203 3.2.4 2122 2.15.1 2066 2.13.2 2011 3.2.5 1981 2.15.2 1906 devel 1856 3.6.2 1807 2.14.1 1791 2.11.1 1764 2.11.0 1733 2.14.2 1700 2.14.0 1660 2.13.0 1628 2.13.1 1585 3.6.3 1560 2.10.0 1496 2.10.1 1476 2.12.0 1432 2.12.2 1387 2.12.1 1362 4.0.0 1346 4.0.1 1251 4.0.3 1092 4.0.2 1071 3.6.2.nn 508 3.2.4revised 480 3.6.3.nn 459 4.0.4 443 release 407 2.9.2 394 4.0.5 334 2.9.0 314 2.8.1 312 2.0.0 309 2.5.1 300 2.5.0 296 2.9.1 293 2.8.0 292 2.1.1 290 2.2.0 290 2.7.0 290 2.4.1 284 2.6.0 282 2.2.1 277 2.4.0 274 2.7.1 272 2.6.2 267 2.3.1 265 2.3.0 254 2.7.2 251 2.6.1 248 2.1.0 232 3.6.1patched 228 2.0.1 208 3.5.1patched 144 patched.exe 141 release.exe 138 4.0.3patched 132 4.0.2patched 120 3.5.2patched 99 3.6.2patched 96 3.6.0patched 85 3.3.2patched 75 3.2.2patched 71 3.3.1patched 70 3.2.3patched 69 4.1.0 61 3.4.1patched 58 3.4.3patched 55 3.6.3patched 55 3.1.2patched 54 3.5.3patched 53 3.2.0patched 50 4.0.5patched 49 4.0.0patched 47 3.4.0patched 46 4.0.4patched 45 2.2.1pat 42 3.2.1patched 41 3.1.3patched 37 3.4.2patched 35 3.3.3patched 32 3.5.0patched 30 3.3.0patched 29 3.2.4-revised 22 4.0.3rc 22 3.2.4patched 20 4.1.0patched 20 3.6.0alpha 19 4.0.0alpha 18 3.3.0beta 17 4.0.1patched 17 3.1.3rc 14 3.2.1rc 14 4.1.0alpha 14 3.2.0alpha 13 3.2.0rc 12 3.2.2rc 11 3.6.1rc 11 4.0.1rc 11 3.4.0alpha 10 3.6.0rc 10 3.6.3beta 10 4.0.4rc 10 3.4.4patched 9 3.5.0alpha 9 3.5.3rc 9 3.6.2rc 9 4.0.2rc 9 4.1.0rc 9 3.2.0beta 8 3.2.5patched 8 3.4.4rc 8 3.5.0rc 8 3.6.0beta 8 4.0.0rc 8 4.0.3beta 8 3.3.3rc 7 3.6.3rc 7 4.1.0beta 7 3.2.3rc 6 3.2.4rc 6 3.3.1rc 6 3.5.2rc 6 3.6.1beta 6 4.0.0beta 6 4.0.1beta 6 3.2.2beta 5 3.4.0beta 5 3.3.0alpha 4 3.3.0rc 4 3.3.2rc 4 3.4.0rc 4 3.4.1rc 4 3.4.2rc 4 3.4.3rc 4 4.0.5beta 4 4.0.5rc 4 3.1.3beta 3 3.2.1beta 3 3.4.3beta 3 3.5.0beta 3 3.6.2beta 3 4.0.2beta 3 4.0.4beta 3 3.2.3beta 2 3.2.4beta 2 3.3.1beta 2 3.4.1beta 2 3.5.1rc 2 3.5.2beta 2 3.4.2beta 1 3.5.3beta 1 devel.exe 1 In conclusion, the daily download trend of R is quite similar to that of R packages, and they are both significantly affected by weekly calendar issue, unusual downloads from CRAN mirrors. But in general, they both tend to increase with the growing of users. References "],["daily-top-15-downloaded-packages.html", "3.3 Daily top 15 downloaded packages", " 3.3 Daily top 15 downloaded packages In this section, we studied the top 15 downloaded packages from 2013-04-01 to 2021-04-01 to see how user preferences has been changing. The data was obtained from CRAN website [http://cran.rstudio.com/web/packages/packages.rds]. We are supposed to know that some packages are hold by Rstudio, and some are developed by core personnel or personnel closely related to R, or some prolific developers. Naturally, the number of downloads of these packages will probably be higher. On the one hand, the packages developed by these experienced developers may be more mature and perfect, on the other hand, users are more inclined to use the packages from famous authors, which can be regarded as a kind of “good use” guarantee. However, the existence of these packages will make the results biased. Therefore, in order to explore the packages constructed by non-special creators, we have screened out four types of packages, namely: Packages maintained by R studio Packages created by authors from R core group Packages created by authors from R secondary group Packages created by R related authors Packages created by top 20 prolific maintainers (This is resourced at “The Most Prolific Package Maintainers on CRAN” (n.d.)) And after that, we generated the lorenz curve here again in Figure 3.9, it can be observed that the distribution of packages in each download group is quite equal now and the Gini value decreases a lot as well, for the ‘extreme effect’ brought by highly-downloaded packages has disappeared. Thus, the user preferences could be shown more clearly. But as after filtering, the number of remaining packages is only 58, which is a too small-sized sample to construct representative conclusions, we would still focus on all the packages on CRAN in our later analysis. Figure 3.9: Percentiles of the download count against cumulative download count of packages after filtering four types of popular and highly-downloaded packages. Finding 1: The topic of newly added packages each year come from quite different areas. Table 3.9 shows the packages that newly come up to the top 15 list each year, from which we can know how the user preference has changed year by year, compared with the previous year. To be more specific : For 2014, ncdf ranks first, which is used to provide an interface to netCDF format data. For 2015, the first downloaded is XLConnectJars on JAVA dependency. For 2016, the first one is reports for standardising the output of R. For 2017, lava.tobit aims to help with estimation and simulation of latent variable models. For 2018, the ranking-first ReportsRs is for creating Microsoft Word and Powerpoint documents. For 2019, CALIBERrfimpute is used to impute missing values in analysis datasets using full conditional specifications. For 2020, SparkR is similar to dplyr but for large datasets. For 2021, heatmap.plus is an extension of heatmap() function. Table 3.9: Changed top 15 downloaded packages from 2013 to 2019 package14_13 package15_14 package16_15 package17_16 package18_17 package19_18 package20_19 package21_20 ncdf XLConnectJars reports lava.tobit ReporteRs freetypeharfbuzz ENmisc heatmap.plus playwith KoNLP moonsun rggobi OceanView replyr CoxBoost lazyrmd DMwR doRedis rPython alr3 ReporteRsjars zipcode gWidgetstcltk packagedocs latticist ElemStatLearn rmongodb tnam gWidgetsRGtk2 rmosek citr robcp bstats testthatsomemore maxent SweaveListingUtils d3heatmap msgpack EMMIXskew skedastic geoRglm adehabitat SDMTools ElemStatLearn RcmdrPlugin.mosaic nws reports wmtsa MSBVAR zipcode RcmdrPlugin.qual SpaDES mixOmics d3heatmap OceanView SpaDES.core DatABEL ReporteRs bomrang snipEM SpaDES.addins swissdd tmg Finding 2: The topic of packages changes least between 2017 and 2019. And the most popular filed is about JAVA dependency. Table 3.10 shows the packages that remain unchanged each year compared with the previous year, from which we can know which packages are relatively stable in popularity. To be more specific, packages like XLConnectJars, DMwR, KoNLP, and gWidgets are relatively popular through years from 2014 to 2021. And they are used for providing JAVA dependency, data mining, linguistic research and providing API for building toolkit-independent, interactive GUIs. Table 3.10: Unchanged top 15 downloaded packages from 2013 to 2019 package14_13 package15_14 package16_15 package17_16 package18_17 package19_18 package20_19 package21_20 Defaults ncdf XLConnectJars XLConnectJars XLConnectJars XLConnectJars freetypeharfbuzz freetypeharfbuzz RSQLite.extfuns epicalc KoNLP KoNLP DMwR KoNLP DMwR OceanView gWidgetsRGtk2 gWidgets DMwR DMwR KoNLP DMwR gWidgets gWidgets gWidgetsRGtk2 gWidgets reports SDMTools SDMTools d3heatmap alr3 DMwR mixOmics maxent reports gWidgets alr3 epicalc alr3 gWidgetsRGtk2 SDMTools mixOmics ElemStatLearn gWidgetsRGtk2 rggobi mixOmics ElemStatLearn reports reports its gWidgets alr3 gWidgetsRGtk2 maxent d3heatmap gWidgets alr3 Let’s take a look at the trending packages. Trending packages are ones that are downloaded at least 1000 times last week, which have increased significantly compared to the average weekly downloads in the previous 24 weeks(R-Hub, n.d.b). That is to say, they are packages with high download volume in a recent short time. Through their topic, we can know what areas of packages people are concerned about recently. Finding 3: The most popular topic of trending packages is for r pkg_trendcom_count$topic[1]. Table 3.11 shows the first 15 trending packages along with their topics. Table 3.11: trending packages with topics package topic mgcv Bayesian clusterSim Cluster fastcluster Cluster Matrix Econometrics mgcv Econometrics mgcv Environmetrics DiceDesign ExperimentalDesign rgl Graphics C50 MachineLearning Cubist MachineLearning SuperLearner MachineLearning mi MissingData norm MissingData arulesSequences ModelDeployment clusterSim Multivariate And Table 3.12 shows the first 10 topics for trending packages. The most popular topic is Bayesian, followed by Cluster and Econometrics. This is easy to understand, because the number of users from different fields is different, so there are also differences in the number of packages used in different topics. And it seems that Bayesian is quite a hit recently. Table 3.12: Topics of trending packages topic download times WebTechnologies 5 Multivariate 4 MachineLearning 3 SocialSciences 3 TimeSeries 3 Cluster 2 Econometrics 2 MissingData 2 OfficialStatistics 2 Optimization 2 So, apart from the topic of the package itself, what other factors will affect its download volume? With this problem in mind, we mainly explored the relationship between the total number of download counts of packages in the past half a year and the earliest release date, the number of updates, the number of commits on GitHub repositories, the length of the name and the alphabetical order of the first letter of the name in the next following sections. References "],["compare-last-years-downloads-with-the-earliest-release-date.html", "3.4 Compare last year’s downloads with the earliest release date", " 3.4 Compare last year’s downloads with the earliest release date Finding: Packages that are initially released earlier on CRAN tend to have a higher download count in the past year. This perhaps is because in earlier times, there were fewer packages in the same category, so users had ‘no choice’ but to use them. Due to this, these packages accumulate a certain user base, which makes it more possible to attract new users. In our common cognition, we may assume that the earlier a package is released, the more people will know about it, and thus the more downloads it will have. However, packages related to different topics cannot be directly compared, because it is possible that the total download amount of packages in a certain topic is higher than that in another topic. Therefore, in order to test this conjecture as clearly as possible, we selected three domain packages through CRAN task view(n.d.), calculated their respective downloads in the previous half a year, and extracted their earliest release dates for comparison. Those three topics are : Packages for Time Series Analysis The first topic is Time Series Analysis. Time Series Analysis is a statistical technique that deals with time series data, or trend analysis. Time series data means that data is in a series of particular time periods or intervals(“Time Series Analysis” 2020). Bayesian packages for general model fitting The second topic is Bayesian Inference. Bayesian statistics is a mathematical procedure that applies probabilities to statistical problems. It provides people the tools to update their beliefs in the evidence of new data(perpetual 2019). Econometrics packages In order to test whether this is the case in other areas, the last topic is for econometrics packages. Econometrics is the use of statistical methods using quantitative data to develop theories or test existing hypotheses in economics or finance, which relies on techniques such as regression models and null hypothesis testing(Hayes 2020). Figure 3.10 displays the scatterplot of the last half year’s download count and the earliest release date for Time Series Analysis, Econometrics and Bayesian packages. It can be seen that generally, as the earliest release date gets later and later, the number of download logs becomes lower and lower. And for Time Series Analysis packages, they are mainly released between 2012 and 2019. For Bayesian packages, most of the packages are from 2007 to 2012. And most Econometrics are centered between 2013 and 2016. Figure 3.10: The download count decrease with the initial release date. In conclusion, we are not surprised to find that the earlier the package is released, the more downloads it will has, which is reflected in all of three topics of packages above. That is probably because the packages released earlier will be better known. When they are released early, there may be a relatively small number of packages of the same topic, under non-serious competition. As a result, the packages coming later can easily be covered up, since people generally tend to use well-known, mature and habitual packages. That is to say, earlier packages are more conducive to the cultivation of user habits. After all, habits are influenced by the length of time. For example, if the teacher is an old user of some packages, they may recommend these packages to their students when they teach, or colleagues may prefer to recommend familiar packages to others especially when they get a satisfying user experience. References "],["compare-moving-average-of-fable-and-forecast.html", "3.5 Compare moving average of fable and forecast", " 3.5 Compare moving average of fable and forecast Finding: Package ‘forecast’ has a more stable download trend comparing to ‘fable.’ And when ‘fable’ gets updated, its downloads peaked, while ‘forecast’ suffers a dropping on the contrast. As we stated in the previous section, the earlier the package is released, the easier it is to get a relatively higher total download. But that doesn’t mean a better growth will exist. Due to that, in this section, we compared package fable and forecast. They are two closely related packages, for fable is the later released tidy version of forecast. And in this way, we can approximately fix all the factors except the initial release date, so that we can compare the growth and changes of these two more clearly. Figure 3.11 and Figure 3.12 show the daily download count changing during last half a year, which indicates strong weekly seasonality. And that means the downloads tend to be higher in week days and thus lower on weekends, which is consistent with total package trend analyzed before. Figure 3.11: The daily download of package “fable” Figure 3.12: The daily download of package “forecast.” Therefore, in order to estimate the trend-cycle and reduce the weekly seasonality to see the changes more clearly, we introduced the Moving average (MA). A moving average of order m can be written as : \\[T_t = \\frac1m\\ \\Sigma_{j = -k}^{k}y_{t+j} \\] where m=2k+1. That is, the estimate of the trend-cycle at time t is obtained by averaging values of the time series within k periods of t. And here, we considered the equal weighed 7 moving average. That is, it calculates the weighted average for every seven consecutive time series with the following weights : [1/7,1/7,1/7,1/7,1/7,1/7,1/7]. Figure 3.13 shows the moving average (MA) of fable and forecast respectively. They have quite different moving average patterns with forecast’s download volume much higher than fable’s. That is, the MA of forecast is relatively stable than that of fable except for the time around New Year’s Eve when forecast has a significant drop. But during that time, a drop also appears in fable, which was probably due to the big New Year holiday. In addition, the purple vertical dashed line in plot of fable marks the update day of it which is on 2021-1-29. And soon after that day, its downloads peaked, which was because the number of download counts will increase on the update day. At the same time, forecast drops and then only gets a gentle increase. Figure 3.13: The moving average of package “forecast” and “fable.” In conclusion, the download variance of forecast is larger than that of fable while the former looks relatively more stable than the latter after applying the moving average. And once again, it coincides with the conclusion of the previous section, that is, the earlier released package tends to gain more cumulative downloads. In addition, we can also see that the growth of both of them sometimes increases at the same time, while sometimes the growth of one corresponds to the decline of the other. As for as we concerned, the shared growth may be due to their similarity. Users may download both at the same time or compare them like us. And the trade-off may also be due to the similarity of their functions, one can be replaced by the other in the process of using. Finally, we can also know that earlier release does not guarantee a faster growth. For example, fable has a more dramatic growth than forecast from 2021-01-21 to 2021-02-06. "],["compare-download-counts-with-the-number-of-commits-on-master-branch.html", "3.6 Compare download counts with the number of commits on master branch", " 3.6 Compare download counts with the number of commits on master branch In this section, we compared last half year’s total downloads with the number of commits on master branch in Github repositories. And this turn, we initially planned to replace the research object with all the packages on CRAN, 17674 packages up to 2021-06-06. But we soon found out that there were only 6185 packages that have a Github repository, and after cleaning up, only 5610 remained. Assumption: In our initial assumption, more commits on master branch of Github repository tends to bring more download counts to packages. On the one hand, the number of commits indicates that developers are constantly supplementing and updating the package, which will lead to more downloads. On the other hand, the number of commits also reflects the attention developers attach to the package to a certain extent. So, if a package has more commits, then developers may invest more in advertising and other ways to promote it, so as to expand the popularity and improve the download count. The way we initially applied was extracting the commits through accessing the Github API. To achieve this, we first scraped the Github URLs from ‘description’ page for all the packages, and cleaned up the multiple URLs or some other redundant symbols and characters. And the URL of scraping the commits through Github API is formatted as “https://api.github.com/repos/{user_repo}/commits?per_page=1”. For example, the URL for package tidyverse can be like “https://api.github.com/repos/tidyverse/tidyverse/commits?per_page=1”. So, practically, by replacing the user_repo part that consists of the name of the related repository and the name of the package holder, we could access the content of all the package URLs through Github API. Based on that, Table 3.13 shows the first 5 packages of the whole, their Github URLs and the user_repo part. However, the Github API has a rate limits allowing for up to 60 requests per hour for unauthenticated requests, and this can be extended to 5000 per hour after authentication(“Resources in the REST API,” n.d.). But even after getting authentication, our rate limit didn’t get promoted. So, we switched to scrape commits by python spider. And by setting random agent, we successfully avoided the API limit. And as this method is quite time consuming, we saved the output as a txt file and load it in R studio to speed up the compiling process. Table 3.13: First 5 packages with their ‘user_repo’ element package URL user_repo abbyyR http://github.com/soodoku/abbyyR soodoku/abbyyR ABCoptim http://github.com/gvegayon/ABCoptim gvegayon/ABCoptim abctools http://github.com/dennisprangle/abctools dennisprangle/abctools abdiv http://github.com/kylebittinger/abdiv kylebittinger/abdiv abess http://github.com/abess-team/abess abess-team/abess Table 3.14 shows the first 5 packages of all, along with their last half a year’s total downloads and the number of commits on Github master branch. Table 3.14: First 5 packages with commits on Github and last half year’s total downloads package commits total rlang 4,427 14748569 dplyr 7150 12054840 ggplot2 4,756 11825489 lifecycle 206 10438007 tibble 4,286 10340887 Figure 3.14 shows the scatterplot along with a smoothing line. In general, more commits, more downloads. But as this only covers a very tiny sample with 60 packages, we are not quite sure whether this conclusion is applicable to all packages on CRAN. Anyway, from the pattern shown by this small sample, our assumption seems relatively reasonable to some extent. That is, the total download count gained by package will tend to rise with the increasing of the number of commits in Github repository. Meanwhile, we could also notice that when the commits count is over 1000, the total download count has a small jump. And we suppose that could result from the very small sample size. And when if we could get enough data, the trend may rise again. Figure 3.14: The commits on master branch of Github repository against the last half a year’s total download count. Another method to explore this question is by looking at the ultra-low-downloaded packages, whose download count only ranks at last 1% of all. And another purpose for this part is to show how we initially intended to scrape commits through Github API with R (as the sample size is less than 60 packages under this situation). From Table 3.15 we could see the last 1% downloaded count is around 401. And as these download counts are extremely low, we could assume that many factors will have little effect on their downloads. Thus, we can further assume that the only two differences between them are the number of commits on Github master branch and the total download count. So, we could filter these ultra-low-downloaded packages and extract the commits on Github, then explore the pattern in total download count against the number of commits in Figure 3.15. It could be believed that when the number of commits increases from 0 to 100, the download count first increases and then decreases. After that, the download volume keeps rising and appears to have a little jump at the end, but we supposed it might be due to the the too small-sized sample, and the observation causing the decline may be an outlier. So, if expanding the observation horizon, we expected the curve might increase again. Therefore, it can be seen that even for these last 1% downloaded packages, there also exist the phenomenon - “the more commits, the more downloads.” Table 3.15: Quantile of total download count for all the packages on CRAN download count 0% 0.00 1% 393.26 2% 728.26 3% 1098.89 4% 1382.00 5% 1682.00 6% 1929.02 7% 2193.41 8% 2344.00 9% 2524.67 10% 2697.00 11% 2801.93 12% 2867.00 13% 2918.00 14% 2969.00 15% 3029.00 16% 3091.16 17% 3159.00 18% 3251.34 19% 3338.94 20% 3410.60 21% 3469.23 22% 3535.00 23% 3584.00 24% 3629.00 25% 3665.00 26% 3700.38 27% 3733.00 28% 3767.00 29% 3810.27 30% 3847.00 31% 3885.00 32% 3930.00 33% 3974.00 34% 4017.00 35% 4062.00 36% 4101.00 37% 4142.00 38% 4188.00 39% 4227.00 40% 4270.00 41% 4311.00 42% 4352.00 43% 4391.00 44% 4435.00 45% 4478.00 46% 4527.98 47% 4568.61 48% 4618.00 49% 4660.87 50% 4704.50 51% 4746.00 52% 4786.76 53% 4830.00 54% 4880.00 55% 4932.00 56% 4984.56 57% 5050.00 58% 5103.00 59% 5168.00 60% 5233.00 61% 5294.00 62% 5357.00 63% 5411.00 64% 5471.00 65% 5543.95 66% 5612.58 67% 5693.21 68% 5774.00 69% 5866.00 70% 5967.00 71% 6086.00 72% 6233.36 73% 6396.98 74% 6581.00 75% 6772.50 76% 6989.64 77% 7230.55 78% 7531.00 79% 7885.77 80% 8312.40 81% 8749.21 82% 9434.98 83% 10241.87 84% 11406.60 85% 12847.15 86% 14527.72 87% 16521.53 88% 18979.88 89% 21783.26 90% 25500.80 91% 30927.88 92% 39937.68 93% 52248.13 94% 69219.48 95% 100841.30 96% 150397.12 97% 255813.44 98% 475915.88 99% 1905298.00 100% 15572507.00 Figure 3.15: The commits on master branch of Github repository against the last half a year’s total download count for last 1% downloaded packages on CRAN. References "],["compare-download-counts-with-alphabetical-order-of-name.html", "3.7 Compare download counts with alphabetical order of name", " 3.7 Compare download counts with alphabetical order of name We might also have such experiences in our life. For example, when we go shopping in the supermarket, the goods placed in front of the shelves will be easier to attract our attention and be selected by us, because we may no longer want to seek products with similar functions for a long time. From the perspective of package name, in addition to the length, does the alphabetical order of the first letter also affect the download volume? For packages with earlier alphabetical order will be placed at the first part of the package list on CRAN(“Available CRAN Packages by Name,” n.d.). To answer this question, we grouped the packages in 26-letter order, calculated the average downloads of each group, and then made comparison. Finding 1: For all packages, the average downloads of different alphabetical group are slightly increasing by its order, while the total download tends to decrease a little, instead. From Figure 3.16 we could see that the average downloads of different alphabetic group are slightly increasing by alphabetic order, while the total downloads tends to decrease a little, instead. This is because the later-ordered group contains fewer packages. It can be seen that developers may prefer to name their packages with a top alphabetical order, which might be easier for users to notice. Figure 3.16: The average total download count of each group is little affected by the alphabetical order of package name. Finding 2: For all packages on CRAN, the group with higher total download tends to have greater variance, owing to more outliers. Then, let’s take a look for how the variance varies across groups. Figure 3.17 shows the data range and the median value for each alphabetical group. It can be seen that the group “R/r” has the highest outlier and the group “X/x” has the largest variation. At the same time, we could also see that the variance between different groups is not very obvious, which means that for each group, 50% of the package download count is relatively concentrated. The real difference is the highest and lowest downloads per group. In general, the larger the total number of downloads (which also means the more packages in the group), the more outliers will be included, such as group “F/f,” “L/l” and “R/r.” Figure 3.17: The packages with name starting with “j” has the largest variation. In order to further verify our conclusion, we turned to the ultra-low-downloaded packages. As we have mentioned previously, when it comes to the ultra-low-downloaded packages, we could assume the only variable that affects the amount of downloads is name order here. From Figure 3.18, we could see that the difference in median download count of each alphabetical group is not significant as we expected. Figure 3.18: (ref:random-boxplot) Therefore, we could approximately draw a conclusion : In general, the packages with the top alphabetical order are easier to get relatively high download volume, but the gap is not significant. At the same time, the higher the number of downloads, the greater the variance will appears in this group. References "]]
